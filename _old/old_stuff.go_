package _old

import (
	"github.com/DisgoOrg/disgo/discord"
	"github.com/DisgoOrg/disgo/rest"
)

func (r *restClientImpl) GetMessage(channelID discord.Snowflake, messageID discord.Snowflake) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.GetMessage.Compile(nil, channelID, messageID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, nil, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) CreateMessage(channelID discord.Snowflake, messageCreate api.MessageCreate) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.CreateMessage.Compile(nil, channelID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	body, err := messageCreate.ToBody()
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, body, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) UpdateMessage(channelID discord.Snowflake, messageID discord.Snowflake, messageUpdate api.MessageUpdate) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateMessage.Compile(nil, channelID, messageID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	body, err := messageUpdate.ToBody()
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, body, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}
	return
}

DeleteMessage lets you delete an api.Message
func (r *restClientImpl) DeleteMessage(channelID discord.Snowflake, messageID discord.Snowflake) (rErr rest.Error) {
	compiledRoute, err := restclient.DeleteMessage.Compile(nil, channelID, messageID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, nil)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
		r.Disgo().Cache().UncacheMessage(channelID, messageID)
	}
	return
}

BulkDeleteMessages lets you bulk delete api.Message(s)
func (r *restClientImpl) BulkDeleteMessages(channelID discord.Snowflake, messageIDs ...discord.Snowflake) (rErr rest.Error) {
	compiledRoute, err := restclient.BulkDeleteMessage.Compile(nil, channelID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, entities.MessageBulkDelete{Messages: messageIDs}, nil)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
	TODO:
		check
		here
		if no err
		means
		all
		messages
		deleted
		for _, messageID := range messageIDs {
			r.Disgo().Cache().UncacheMessage(channelID, messageID)
		}
	}
	return
}

CrosspostMessage lets you crosspost an api.Message in a channel with
type api.ChannelTypeNews
func (r *restClientImpl) CrosspostMessage(channelID discord.Snowflake, messageID discord.Snowflake) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.CrosspostMessage.Compile(nil, channelID, messageID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) GetGuild(guildID discord.Snowflake, withCounts bool) (guild *api.Guild, rErr rest.Error) {
	var queryParams = restclient.QueryValues{
		"with_counts": withCounts,
	}
	compiledRoute, err := restclient.GetGuild.Compile(queryParams, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, restclient.NewError(nil, err))
	}

	var fullGuild *discord.FullGuild
	rErr = r.Do(compiledRoute, nil, &fullGuild)
	if rErr == nil {
		guild = r.Disgo().EntityBuilder().CreateGuild(fullGuild, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) GetGuildPreview(guildID discord.Snowflake) (guildPreview *api.GuildPreview, rErr rest.Error) {
	compiledRoute, err := restclient.GetGuildPreview.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, restclient.NewError(nil, err))
	}

	rErr = r.Do(compiledRoute, nil, &guildPreview)
	return
}

func (r *restClientImpl) CreateGuild(createGuild discord.CreateGuild) (guild *discord.Guild, rErr rest.Error) {
	compiledRoute, err := restclient.CreateGuild.Compile(nil)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	var fullGuild *discord.FullGuild
	rErr = r.Do(compiledRoute, createGuild, &fullGuild)
	if rErr == nil {
		guild = r.Disgo().EntityBuilder().CreateGuild(fullGuild, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) UpdateGuild(guildID discord.Snowflake, updateGuild api.UpdateGuild) (guild *api.Guild, rErr rest.Error) {
	compiledRoute, err := restclient.CreateGuild.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	var fullGuild *discord.FullGuild
	rErr = r.Do(compiledRoute, updateGuild, &fullGuild)
	if rErr == nil {
		guild = r.Disgo().EntityBuilder().CreateGuild(fullGuild, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) DeleteGuild(guildID discord.Snowflake) rest.Error {
	compiledRoute, err := restclient.DeleteGuild.Compile(nil, guildID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

GetMember fetches the specific member
func (r *restClientImpl) GetMember(guildID discord.Snowflake, userID discord.Snowflake) (member *entities.Member, rErr rest.Error) {
	compiledRoute, err := restclient.GetMember.Compile(nil, guildID, userID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &member)
	if rErr == nil {
		member = r.Disgo().EntityBuilder().CreateMember(guildID, member, CacheStrategyNoWs)
	}
	return
}

GetMembers fetches all members for a guild
func (r *restClientImpl) GetMembers(guildID discord.Snowflake) (members []*discord.Member, rErr rest.Error) {
	compiledRoute, err := restclient.GetMembers.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &members)
	if rErr == nil {
		for _, member := range members {
			member = r.Disgo().EntityBuilder().CreateMember(guildID, member, CacheStrategyNoWs)
		}
	}
	return
}

func (r *restClientImpl) SearchMembers(guildID discord.Snowflake, query string, limit int) (members []*discord.Member, rErr rest.Error) {
	queryParams := restclient.QueryValues{}
	if query != "" {
		queryParams["query"] = query
	}
	if limit > 0 {
		queryParams["limit"] = limit
	}
	compiledRoute, err := restclient.GetMembers.Compile(queryParams, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &members)
	if rErr == nil {
		members = make([]*discord.Member, len(members))
		for i, member := range members {
			members[i] = r.Disgo().EntityBuilder().CreateMember(guildID, member, CacheStrategyNoWs)
		}
	}
	return
}

AddMember adds a member to the guild with the oauth2 access BotToken.requires api.PermissionCreateInstantInvite
func (r *restClientImpl) AddMember(guildID discord.Snowflake, userID discord.Snowflake, addMember discord.AddMember) (member *discord.Member, rErr rest.Error) {
	compiledRoute, err := restclient.AddMember.Compile(nil, guildID, userID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, addMember, &member)
	if rErr == nil {
		member = r.Disgo().EntityBuilder().CreateMember(guildID, member, CacheStrategyNoWs)
	}
	return
}

RemoveMember kicks an api.Member from the api.Guild.requires api.PermissionKickMembers
func (r *restClientImpl) RemoveMember(guildID discord.Snowflake, userID discord.Snowflake, reason string) (rErr rest.Error) {
	var params restclient.QueryValues
	if reason != "" {
		params = restclient.QueryValues{"reason": reason}
	}
	compiledRoute, err := restclient.RemoveMember.Compile(params, guildID, userID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, nil)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
		r.Disgo().Cache().Uncache(guildID, userID)
	}
	return
}

UpdateMember updates an api.Member
func (r *restClientImpl) UpdateMember(guildID discord.Snowflake, userID discord.Snowflake, updateMember entities.UpdateMember) (member *entities.Member, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateMember.Compile(nil, guildID, userID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, updateMember, &member)
	if rErr == nil {
		member = r.Disgo().EntityBuilder().CreateMember(guildID, member, CacheStrategyNoWs)
	}
	return
}

UpdateSelfNick updates the bots nickname in a guild
func (r *restClientImpl) UpdateSelfNick(guildID discord.Snowflake, nick string) (newNick *string, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateSelfNick.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	var updateNick *discord.UpdateSelfNick
	rErr = r.Do(compiledRoute, &discord.UpdateSelfNick{Nick: nick}, &updateNick)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
		var nick *string
		if updateNick.Nick == "" {
			nick = nil
		}
		r.Disgo().Cache().Member(guildID, r.Disgo().ClientID()).Nick = nick
		newNick = nick
	}
	return
}

MoveMember moves/kicks the api.Member to/from an api.VoiceChannel
func (r *restClientImpl) MoveMember(guildID discord.Snowflake, userID discord.Snowflake, channelID *discord.Snowflake) (member *entities.Member, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateMember.Compile(nil, guildID, userID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, discord.MoveMember{ChannelID: channelID}, &member)
	if rErr == nil {
		member = r.Disgo().EntityBuilder().CreateMember(guildID, member, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) GetAuditLog(guildID discord.Snowflake, userID discord.Snowflake, actionType discord.AuditLogEvent, before discord.Snowflake, limit int) (auditLog *discord.AuditLog, rErr rest.Error) {
	values := restclient.QueryValues{}
	if guildID != "" {
		values["guild_id"] = guildID
	}
	if userID != "" {
		values["user_id"] = userID
	}
	if actionType != 0 {
		values["action_type"] = actionType
	}
	if before != "" {
		values["before"] = guildID
	}
	if limit != 0 {
		values["limit"] = limit
	}
	compiledRoute, err := restclient.GetAuditLogs.Compile(values, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &auditLog)
	if rErr == nil {
		auditLog = r.Disgo().EntityBuilder().CreateAuditLog(guildID, discord.AuditLogFilterOptions{
			UserID:     userID,
			ActionType: actionType,
			Before:     before,
			Limit:      limit,
		}, auditLog, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) GetIntegrations(guildID discord.Snowflake) (integrations []*discord.Integration, rErr rest.Error) {
	compiledRoute, err := restclient.GetIntegrations.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &integrations)
	if rErr == nil {
		for _, integration := range integrations {
			integration = r.Disgo().EntityBuilder().CreateIntegration(guildID, integration, CacheStrategyNoWs)
		}
	}
	return
}

func (r *restClientImpl) DeleteIntegration(guildID discord.Snowflake, integrationID discord.Snowflake) rest.Error {
	compiledRoute, err := restclient.DeleteIntegration.Compile(nil, guildID, integrationID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

func (r *restClientImpl) GetBans(guildID discord.Snowflake) (bans []discord.Ban, rErr rest.Error) {
	compiledRoute, err := restclient.GetBans.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &bans)
	if rErr == nil {
		for _, ban := range bans {
			ban.User = r.Disgo().EntityBuilder().CreateUser(ban.User, CacheStrategyNoWs)
		}
	}
	return
}
func (r *restClientImpl) GetBan(guildID discord.Snowflake, userID discord.Snowflake) (ban *discord.Ban, rErr rest.Error) {
	compiledRoute, err := restclient.GetBan.Compile(nil, guildID, userID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &ban)
	if rErr == nil {
		ban.User = r.Disgo().EntityBuilder().CreateUser(ban.User, CacheStrategyNoWs)
	}
	return
}
func (r *restClientImpl) AddBan(guildID discord.Snowflake, userID discord.Snowflake, reason string, deleteMessageDays int) rest.Error {
	compiledRoute, err := restclient.AddBan.Compile(nil, guildID, userID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, discord.AddBan{DeleteMessageDays: deleteMessageDays, Reason: reason}, nil)
}

func (r *restClientImpl) DeleteBan(guildID discord.Snowflake, userID discord.Snowflake) rest.Error {
	compiledRoute, err := restclient.DeleteBan.Compile(nil, guildID, userID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

AddMemberRole adds an api.Role to an api.Member
func (r *restClientImpl) AddMemberRole(guildID discord.Snowflake, userID discord.Snowflake, roleID discord.Snowflake) (rErr rest.Error) {
	compiledRoute, err := restclient.AddMemberRole.Compile(nil, guildID, userID, roleID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, nil)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
		member := r.Disgo().Cache().Member(guildID, userID)
		if member != nil {
			member.RoleIDs = append(member.RoleIDs, roleID)
		}
	}
	return
}

RemoveMemberRole removes an api.Role(s) from an api.Member
func (r *restClientImpl) RemoveMemberRole(guildID discord.Snowflake, userID discord.Snowflake, roleID discord.Snowflake) (rErr rest.Error) {
	compiledRoute, err := restclient.RemoveMemberRole.Compile(nil, guildID, userID, roleID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, nil)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
		member := r.Disgo().Cache().Member(guildID, userID)
		if member != nil {
			for i, id := range member.RoleIDs {
				if id == roleID {
					member.RoleIDs = append(member.RoleIDs[:i], member.RoleIDs[i+1:]...)
					break
				}
			}
		}
	}
	return
}

GetRoles fetches all api.Role(s) from an api.Guild
func (r *restClientImpl) GetRoles(guildID discord.Snowflake) (roles []*entities.Role, rErr rest.Error) {
	compiledRoute, err := restclient.GetRoles.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, &roles)
	if rErr == nil {
		for _, role := range roles {
			role = r.Disgo().EntityBuilder().CreateRole(guildID, role, CacheStrategyNoWs)
		}
	}
	return
}

CreateRole creates a new role for a guild.Requires api.PermissionManageRoles
func (r *restClientImpl) CreateRole(guildID discord.Snowflake, createRole discord.CreateRole) (newRole *discord.Role, rErr rest.Error) {
	compiledRoute, err := restclient.CreateRole.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, createRole, &newRole)
	if rErr == nil {
		newRole = r.Disgo().EntityBuilder().CreateRole(guildID, newRole, CacheStrategyNoWs)
	}
	return
}

UpdateRole updates a role from a guild.Requires api.PermissionManageRoles
func (r *restClientImpl) UpdateRole(guildID discord.Snowflake, roleID discord.Snowflake, role discord.UpdateRole) (newRole *discord.Role, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateRole.Compile(nil, guildID, roleID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, role, &newRole)
	if rErr == nil {
		newRole = r.Disgo().EntityBuilder().CreateRole(guildID, newRole, CacheStrategyNoWs)
	}
	return
}

UpdateRolePositions updates the position of a role from a guild. Requires api.PermissionManageRoles
func (r *restClientImpl) UpdateRolePositions(guildID discord.Snowflake, roleUpdates ...discord.UpdateRolePosition) (roles []*entities.Role, rErr rest.Error) {
	compiledRoute, err := restclient.GetRoles.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, roleUpdates, &roles)
	if rErr == nil {
		for _, role := range roles {
			role = r.Disgo().EntityBuilder().CreateRole(guildID, role, CacheStrategyNoWs)
		}
	}
	return
}

DeleteRole deletes a role from a guild.Requires api.PermissionManageRoles
func (r *restClientImpl) DeleteRole(guildID discord.Snowflake, roleID discord.Snowflake) (rErr rest.Error) {
	compiledRoute, err := restclient.UpdateRole.Compile(nil, guildID, roleID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	rErr = r.Do(compiledRoute, nil, nil)
	if rErr == nil && CacheStrategyNoWs(r.Disgo()) {
		r.disgo.Cache().Uncache(guildID, roleID)
	}
	return
}

AddReaction lets you add a reaction to an api.Message
func (r *restClientImpl) AddReaction(channelID discord.Snowflake, messageID discord.Snowflake, emoji string) rest.Error {
	compiledRoute, err := restclient.AddReaction.Compile(nil, channelID, messageID, internal.normalizeEmoji(emoji))
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

RemoveOwnReaction lets you remove your own reaction from an api.Message
func (r *restClientImpl) RemoveOwnReaction(channelID discord.Snowflake, messageID discord.Snowflake, emoji string) rest.Error {
	compiledRoute, err := restclient.RemoveOwnReaction.Compile(nil, channelID, messageID, internal.normalizeEmoji(emoji))
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

RemoveUserReaction lets you remove a specific reaction from an api.User from an api.Message
func (r *restClientImpl) RemoveUserReaction(channelID discord.Snowflake, messageID discord.Snowflake, emoji string, userID discord.Snowflake) rest.Error {
	compiledRoute, err := restclient.RemoveUserReaction.Compile(nil, channelID, messageID, internal.normalizeEmoji(emoji), userID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}


SendInteractionResponse used to send the initial response on an api.Interaction
func (r *restClientImpl) SendInteractionResponse(interactionID discord.Snowflake, interactionToken string, interactionResponse discord.InteractionResponse) rest.Error {
	compiledRoute, err := restclient.CreateInteractionResponse.Compile(nil, interactionID, interactionToken)
	if err != nil {
		return restclient.NewError(nil, err)
	}

	body, err := interactionResponse.ToBody()
	if err != nil {
		return restclient.NewError(nil, err)
	}

	return r.Do(compiledRoute, body, nil)
}

func (r *restClientImpl) UpdateInteractionResponse(applicationID discord.Snowflake, interactionToken string, messageUpdate api.MessageUpdate) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateInteractionResponse.Compile(nil, applicationID, interactionToken)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	body, err := messageUpdate.ToBody()
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, body, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) DeleteInteractionResponse(applicationID discord.Snowflake, interactionToken string) rest.Error {
	compiledRoute, err := restclient.DeleteInteractionResponse.Compile(nil, applicationID, interactionToken)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

func (r *restClientImpl) SendFollowupMessage(applicationID discord.Snowflake, interactionToken string, messageCreate api.MessageCreate) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.CreateFollowupMessage.Compile(nil, applicationID, interactionToken)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	body, err := messageCreate.ToBody()
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, body, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}

	return
}

func (r *restClientImpl) UpdateFollowupMessage(applicationID discord.Snowflake, interactionToken string, messageID discord.Snowflake, messageUpdate api.MessageUpdate) (message *entities.Message, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateFollowupMessage.Compile(nil, applicationID, interactionToken, messageID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	body, err := messageUpdate.ToBody()
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, body, &message)
	if rErr == nil {
		message = r.Disgo().EntityBuilder().CreateMessage(message, CacheStrategyNoWs)
	}

	return
}

func (r *restClientImpl) DeleteFollowupMessage(applicationID discord.Snowflake, interactionToken string, messageID discord.Snowflake) rest.Error {
	compiledRoute, err := restclient.DeleteFollowupMessage.Compile(nil, applicationID, interactionToken, messageID)
	if err != nil {
		return restclient.NewError(nil, err)
	}
	return r.Do(compiledRoute, nil, nil)
}

func (r *restClientImpl) GetGuildTemplate(templateCode string) (guildTemplate *api.GuildTemplate, rErr rest.Error) {
	compiledRoute, err := restclient.GetGuildTemplate.Compile(nil, templateCode)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, nil, &guildTemplate)
	if rErr == nil {
		guildTemplate = r.Disgo().EntityBuilder().CreateGuildTemplate(guildTemplate, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) GetGuildTemplates(guildID discord.Snowflake) (guildTemplates []*api.GuildTemplate, rErr rest.Error) {
	compiledRoute, err := restclient.GetGuildTemplates.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, nil, &guildTemplates)
	if rErr == nil {
		for _, guildTemplate := range guildTemplates {
			guildTemplate = r.Disgo().EntityBuilder().CreateGuildTemplate(guildTemplate, CacheStrategyNoWs)
		}
	}
	return
}

func (r *restClientImpl) CreateGuildTemplate(guildID discord.Snowflake, createGuildTemplate api.CreateGuildTemplate) (guildTemplate *api.GuildTemplate, rErr rest.Error) {
	compiledRoute, err := restclient.CreateGuildTemplate.Compile(nil, guildID)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, createGuildTemplate, &guildTemplate)
	if rErr == nil {
		guildTemplate = r.Disgo().EntityBuilder().CreateGuildTemplate(guildTemplate, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) CreateGuildFromTemplate(templateCode string, createGuildFromTemplate api.CreateGuildFromTemplate) (guild *api.Guild, rErr rest.Error) {
	compiledRoute, err := restclient.CreateGuildFromTemplate.Compile(nil, templateCode)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	var fullGuild *api.FullGuild
	rErr = r.Do(compiledRoute, createGuildFromTemplate, &fullGuild)
	if rErr == nil {
		guild = r.Disgo().EntityBuilder().CreateGuild(fullGuild, CacheStrategyNoWs)
	}

	return
}

func (r *restClientImpl) SyncGuildTemplate(guildID discord.Snowflake, templateCode string) (guildTemplate *api.GuildTemplate, rErr rest.Error) {
	compiledRoute, err := restclient.SyncGuildTemplate.Compile(nil, guildID, templateCode)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, nil, &guildTemplate)
	if rErr == nil {
		guildTemplate = r.Disgo().EntityBuilder().CreateGuildTemplate(guildTemplate, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) UpdateGuildTemplate(guildID discord.Snowflake, templateCode string, updateGuildTemplate api.UpdateGuildTemplate) (guildTemplate *api.GuildTemplate, rErr rest.Error) {
	compiledRoute, err := restclient.UpdateGuildTemplate.Compile(nil, guildID, templateCode)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, updateGuildTemplate, &guildTemplate)
	if rErr == nil {
		guildTemplate = r.Disgo().EntityBuilder().CreateGuildTemplate(guildTemplate, CacheStrategyNoWs)
	}
	return
}

func (r *restClientImpl) DeleteGuildTemplate(guildID discord.Snowflake, templateCode string) (guildTemplate *api.GuildTemplate, rErr rest.Error) {
	compiledRoute, err := restclient.DeleteGuildTemplate.Compile(nil, guildID, templateCode)
	if err != nil {
		return nil, restclient.NewError(nil, err)
	}

	rErr = r.Do(compiledRoute, nil, &guildTemplate)
	if rErr == nil {
		guildTemplate = r.Disgo().EntityBuilder().CreateGuildTemplate(guildTemplate, CacheStrategyNoWs)
	}
	return
}
